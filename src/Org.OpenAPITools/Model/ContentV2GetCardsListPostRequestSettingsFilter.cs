/*
 * Работа с товарами
 *
 * Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца. 
 *
 * The version of the OpenAPI document: products
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Параметры фильтрации
    /// </summary>
    [DataContract(Name = "_content_v2_get_cards_list_post_request_settings_filter")]
    public partial class ContentV2GetCardsListPostRequestSettingsFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentV2GetCardsListPostRequestSettingsFilter" /> class.
        /// </summary>
        /// <param name="withPhoto">Фильтр по фото:      * &#x60;0&#x60; — только карточки без фото   * &#x60;1&#x60; — только карточки с фото   * &#x60;-1&#x60; — все карточки товара .</param>
        /// <param name="textSearch">Поиск по артикулу продавца, артикулу WB, баркоду.</param>
        /// <param name="tagIDs">Поиск по ID ярлыков.</param>
        /// <param name="allowedCategoriesOnly">Фильтр по категории. &#x60;true&#x60; - только разрешённые, &#x60;false&#x60; - все. Не используется в песочнице..</param>
        /// <param name="objectIDs">Поиск по id предметов.</param>
        /// <param name="brands">Поиск по брендам.</param>
        /// <param name="imtID">Поиск по ID карточки товара.</param>
        public ContentV2GetCardsListPostRequestSettingsFilter(int withPhoto = default(int), string textSearch = default(string), List<int> tagIDs = default(List<int>), bool allowedCategoriesOnly = default(bool), List<int> objectIDs = default(List<int>), List<string> brands = default(List<string>), int imtID = default(int))
        {
            this.WithPhoto = withPhoto;
            this.TextSearch = textSearch;
            this.TagIDs = tagIDs;
            this.AllowedCategoriesOnly = allowedCategoriesOnly;
            this.ObjectIDs = objectIDs;
            this.Brands = brands;
            this.ImtID = imtID;
        }

        /// <summary>
        /// Фильтр по фото:      * &#x60;0&#x60; — только карточки без фото   * &#x60;1&#x60; — только карточки с фото   * &#x60;-1&#x60; — все карточки товара 
        /// </summary>
        /// <value>Фильтр по фото:      * &#x60;0&#x60; — только карточки без фото   * &#x60;1&#x60; — только карточки с фото   * &#x60;-1&#x60; — все карточки товара </value>
        [DataMember(Name = "withPhoto", EmitDefaultValue = false)]
        public int WithPhoto { get; set; }

        /// <summary>
        /// Поиск по артикулу продавца, артикулу WB, баркоду
        /// </summary>
        /// <value>Поиск по артикулу продавца, артикулу WB, баркоду</value>
        [DataMember(Name = "textSearch", EmitDefaultValue = false)]
        public string TextSearch { get; set; }

        /// <summary>
        /// Поиск по ID ярлыков
        /// </summary>
        /// <value>Поиск по ID ярлыков</value>
        [DataMember(Name = "tagIDs", EmitDefaultValue = false)]
        public List<int> TagIDs { get; set; }

        /// <summary>
        /// Фильтр по категории. &#x60;true&#x60; - только разрешённые, &#x60;false&#x60; - все. Не используется в песочнице.
        /// </summary>
        /// <value>Фильтр по категории. &#x60;true&#x60; - только разрешённые, &#x60;false&#x60; - все. Не используется в песочнице.</value>
        [DataMember(Name = "allowedCategoriesOnly", EmitDefaultValue = true)]
        public bool AllowedCategoriesOnly { get; set; }

        /// <summary>
        /// Поиск по id предметов
        /// </summary>
        /// <value>Поиск по id предметов</value>
        [DataMember(Name = "objectIDs", EmitDefaultValue = false)]
        public List<int> ObjectIDs { get; set; }

        /// <summary>
        /// Поиск по брендам
        /// </summary>
        /// <value>Поиск по брендам</value>
        [DataMember(Name = "brands", EmitDefaultValue = false)]
        public List<string> Brands { get; set; }

        /// <summary>
        /// Поиск по ID карточки товара
        /// </summary>
        /// <value>Поиск по ID карточки товара</value>
        [DataMember(Name = "imtID", EmitDefaultValue = false)]
        public int ImtID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentV2GetCardsListPostRequestSettingsFilter {\n");
            sb.Append("  WithPhoto: ").Append(WithPhoto).Append("\n");
            sb.Append("  TextSearch: ").Append(TextSearch).Append("\n");
            sb.Append("  TagIDs: ").Append(TagIDs).Append("\n");
            sb.Append("  AllowedCategoriesOnly: ").Append(AllowedCategoriesOnly).Append("\n");
            sb.Append("  ObjectIDs: ").Append(ObjectIDs).Append("\n");
            sb.Append("  Brands: ").Append(Brands).Append("\n");
            sb.Append("  ImtID: ").Append(ImtID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
