/*
 * Работа с товарами
 *
 * Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца. 
 *
 * The version of the OpenAPI document: products
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RequestMoveNmsImtConn
    /// </summary>
    [DataContract(Name = "requestMoveNmsImtConn")]
    public partial class RequestMoveNmsImtConn : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestMoveNmsImtConn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestMoveNmsImtConn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestMoveNmsImtConn" /> class.
        /// </summary>
        /// <param name="targetIMT">Существующий у продавца &#x60;imtID&#x60;, под которым необходимо объединить карточки товаров (required).</param>
        /// <param name="nmIDs">&#x60;nmID&#x60;, которые необходимо объединить (максимум 30) (required).</param>
        public RequestMoveNmsImtConn(int targetIMT = default(int), List<int> nmIDs = default(List<int>))
        {
            this.TargetIMT = targetIMT;
            // to ensure "nmIDs" is required (not null)
            if (nmIDs == null)
            {
                throw new ArgumentNullException("nmIDs is a required property for RequestMoveNmsImtConn and cannot be null");
            }
            this.NmIDs = nmIDs;
        }

        /// <summary>
        /// Существующий у продавца &#x60;imtID&#x60;, под которым необходимо объединить карточки товаров
        /// </summary>
        /// <value>Существующий у продавца &#x60;imtID&#x60;, под которым необходимо объединить карточки товаров</value>
        /*
        <example>123</example>
        */
        [DataMember(Name = "targetIMT", IsRequired = true, EmitDefaultValue = true)]
        public int TargetIMT { get; set; }

        /// <summary>
        /// &#x60;nmID&#x60;, которые необходимо объединить (максимум 30)
        /// </summary>
        /// <value>&#x60;nmID&#x60;, которые необходимо объединить (максимум 30)</value>
        /*
        <example>[837459235,828572090]</example>
        */
        [DataMember(Name = "nmIDs", IsRequired = true, EmitDefaultValue = true)]
        public List<int> NmIDs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestMoveNmsImtConn {\n");
            sb.Append("  TargetIMT: ").Append(TargetIMT).Append("\n");
            sb.Append("  NmIDs: ").Append(NmIDs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
