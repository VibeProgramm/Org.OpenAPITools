/*
 * Работа с товарами
 *
 * Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца. 
 *
 * The version of the OpenAPI document: products
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Данные о складе продавца
    /// </summary>
    [DataContract(Name = "Warehouse")]
    public partial class Warehouse : IValidatableObject
    {
        /// <summary>
        /// &lt;dl&gt; &lt;dt&gt;Тип товара: &lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; 
        /// </summary>
        /// <value>&lt;dl&gt; &lt;dt&gt;Тип товара: &lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; </value>
        public enum CargoTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3
        }


        /// <summary>
        /// &lt;dl&gt; &lt;dt&gt;Тип товара: &lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; 
        /// </summary>
        /// <value>&lt;dl&gt; &lt;dt&gt;Тип товара: &lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; </value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "cargoType", EmitDefaultValue = false)]
        public CargoTypeEnum? CargoType { get; set; }
        /// <summary>
        /// &lt;dl&gt; &lt;dt&gt;Тип доставки:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB (FBS)&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца (DBS)&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB (DBW)&lt;/dd&gt; &lt;/dl&gt; 
        /// </summary>
        /// <value>&lt;dl&gt; &lt;dt&gt;Тип доставки:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB (FBS)&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца (DBS)&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB (DBW)&lt;/dd&gt; &lt;/dl&gt; </value>
        public enum DeliveryTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3
        }


        /// <summary>
        /// &lt;dl&gt; &lt;dt&gt;Тип доставки:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB (FBS)&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца (DBS)&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB (DBW)&lt;/dd&gt; &lt;/dl&gt; 
        /// </summary>
        /// <value>&lt;dl&gt; &lt;dt&gt;Тип доставки:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB (FBS)&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца (DBS)&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB (DBW)&lt;/dd&gt; &lt;/dl&gt; </value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "deliveryType", EmitDefaultValue = false)]
        public DeliveryTypeEnum? DeliveryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Warehouse" /> class.
        /// </summary>
        /// <param name="name">Название склада продавца.</param>
        /// <param name="officeId">ID склада WB.</param>
        /// <param name="id">ID склада продавца.</param>
        /// <param name="cargoType">&lt;dl&gt; &lt;dt&gt;Тип товара: &lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; .</param>
        /// <param name="deliveryType">&lt;dl&gt; &lt;dt&gt;Тип доставки:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB (FBS)&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца (DBS)&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB (DBW)&lt;/dd&gt; &lt;/dl&gt; .</param>
        public Warehouse(string name = default(string), long officeId = default(long), long id = default(long), CargoTypeEnum? cargoType = default(CargoTypeEnum?), DeliveryTypeEnum? deliveryType = default(DeliveryTypeEnum?))
        {
            this.Name = name;
            this.OfficeId = officeId;
            this.Id = id;
            this.CargoType = cargoType;
            this.DeliveryType = deliveryType;
        }

        /// <summary>
        /// Название склада продавца
        /// </summary>
        /// <value>Название склада продавца</value>
        /*
        <example>ул. Троицкая, Подольск, Московская обл.</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// ID склада WB
        /// </summary>
        /// <value>ID склада WB</value>
        /*
        <example>15</example>
        */
        [DataMember(Name = "officeId", EmitDefaultValue = false)]
        public long OfficeId { get; set; }

        /// <summary>
        /// ID склада продавца
        /// </summary>
        /// <value>ID склада продавца</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Warehouse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OfficeId: ").Append(OfficeId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CargoType: ").Append(CargoType).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
