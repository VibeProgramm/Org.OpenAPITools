/*
 * Работа с товарами
 *
 * Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца. 
 *
 * The version of the OpenAPI document: products
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Информация о размере
    /// </summary>
    [DataContract(Name = "SizeGood")]
    public partial class SizeGood : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SizeGood" /> class.
        /// </summary>
        /// <param name="nmID">Артикул WB.</param>
        /// <param name="sizeID">ID размера. Можно получить с помощью метода [Получение списка товаров по артикулам](./work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1filter/get), поле &#x60;sizeID&#x60;. В методах контента это поле &#x60;chrtID&#x60;.</param>
        /// <param name="vendorCode">Артикул продавца.</param>
        /// <param name="price">Цена.</param>
        /// <param name="currencyIsoCode4217">Валюта, по стандарту ISO 4217.</param>
        /// <param name="discountedPrice">Цена со скидкой.</param>
        /// <param name="clubDiscountedPrice">Цена со скидкой, включая скидку WB Клуба.</param>
        /// <param name="discount">Скидка, %.</param>
        /// <param name="clubDiscount">Скидка WB Клуба, %.</param>
        /// <param name="techSizeName">Размер товара.</param>
        /// <param name="editableSizePrice">Можно ли устанавливать цены отдельно для разных размеров: &#x60;true&#x60; — можно, &#x60;false&#x60; — нельзя. Эта возможность зависит от категории товара .</param>
        public SizeGood(int nmID = default(int), int sizeID = default(int), string vendorCode = default(string), int price = default(int), string currencyIsoCode4217 = default(string), decimal discountedPrice = default(decimal), decimal clubDiscountedPrice = default(decimal), int discount = default(int), int clubDiscount = default(int), string techSizeName = default(string), bool editableSizePrice = default(bool))
        {
            this.NmID = nmID;
            this.SizeID = sizeID;
            this.VendorCode = vendorCode;
            this.Price = price;
            this.CurrencyIsoCode4217 = currencyIsoCode4217;
            this.DiscountedPrice = discountedPrice;
            this.ClubDiscountedPrice = clubDiscountedPrice;
            this.Discount = discount;
            this.ClubDiscount = clubDiscount;
            this.TechSizeName = techSizeName;
            this.EditableSizePrice = editableSizePrice;
        }

        /// <summary>
        /// Артикул WB
        /// </summary>
        /// <value>Артикул WB</value>
        /*
        <example>123</example>
        */
        [DataMember(Name = "nmID", EmitDefaultValue = false)]
        public int NmID { get; set; }

        /// <summary>
        /// ID размера. Можно получить с помощью метода [Получение списка товаров по артикулам](./work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1filter/get), поле &#x60;sizeID&#x60;. В методах контента это поле &#x60;chrtID&#x60;
        /// </summary>
        /// <value>ID размера. Можно получить с помощью метода [Получение списка товаров по артикулам](./work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1filter/get), поле &#x60;sizeID&#x60;. В методах контента это поле &#x60;chrtID&#x60;</value>
        /*
        <example>98989887</example>
        */
        [DataMember(Name = "sizeID", EmitDefaultValue = false)]
        public int SizeID { get; set; }

        /// <summary>
        /// Артикул продавца
        /// </summary>
        /// <value>Артикул продавца</value>
        /*
        <example>34552332</example>
        */
        [DataMember(Name = "vendorCode", EmitDefaultValue = false)]
        public string VendorCode { get; set; }

        /// <summary>
        /// Цена
        /// </summary>
        /// <value>Цена</value>
        /*
        <example>1000</example>
        */
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public int Price { get; set; }

        /// <summary>
        /// Валюта, по стандарту ISO 4217
        /// </summary>
        /// <value>Валюта, по стандарту ISO 4217</value>
        /*
        <example>RUB</example>
        */
        [DataMember(Name = "currencyIsoCode4217", EmitDefaultValue = false)]
        public string CurrencyIsoCode4217 { get; set; }

        /// <summary>
        /// Цена со скидкой
        /// </summary>
        /// <value>Цена со скидкой</value>
        /*
        <example>700</example>
        */
        [DataMember(Name = "discountedPrice", EmitDefaultValue = false)]
        public decimal DiscountedPrice { get; set; }

        /// <summary>
        /// Цена со скидкой, включая скидку WB Клуба
        /// </summary>
        /// <value>Цена со скидкой, включая скидку WB Клуба</value>
        /*
        <example>665</example>
        */
        [DataMember(Name = "clubDiscountedPrice", EmitDefaultValue = false)]
        public decimal ClubDiscountedPrice { get; set; }

        /// <summary>
        /// Скидка, %
        /// </summary>
        /// <value>Скидка, %</value>
        /*
        <example>30</example>
        */
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public int Discount { get; set; }

        /// <summary>
        /// Скидка WB Клуба, %
        /// </summary>
        /// <value>Скидка WB Клуба, %</value>
        /*
        <example>5</example>
        */
        [DataMember(Name = "clubDiscount", EmitDefaultValue = false)]
        public int ClubDiscount { get; set; }

        /// <summary>
        /// Размер товара
        /// </summary>
        /// <value>Размер товара</value>
        /*
        <example>42</example>
        */
        [DataMember(Name = "techSizeName", EmitDefaultValue = false)]
        public string TechSizeName { get; set; }

        /// <summary>
        /// Можно ли устанавливать цены отдельно для разных размеров: &#x60;true&#x60; — можно, &#x60;false&#x60; — нельзя. Эта возможность зависит от категории товара 
        /// </summary>
        /// <value>Можно ли устанавливать цены отдельно для разных размеров: &#x60;true&#x60; — можно, &#x60;false&#x60; — нельзя. Эта возможность зависит от категории товара </value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "editableSizePrice", EmitDefaultValue = true)]
        public bool EditableSizePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SizeGood {\n");
            sb.Append("  NmID: ").Append(NmID).Append("\n");
            sb.Append("  SizeID: ").Append(SizeID).Append("\n");
            sb.Append("  VendorCode: ").Append(VendorCode).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CurrencyIsoCode4217: ").Append(CurrencyIsoCode4217).Append("\n");
            sb.Append("  DiscountedPrice: ").Append(DiscountedPrice).Append("\n");
            sb.Append("  ClubDiscountedPrice: ").Append(ClubDiscountedPrice).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  ClubDiscount: ").Append(ClubDiscount).Append("\n");
            sb.Append("  TechSizeName: ").Append(TechSizeName).Append("\n");
            sb.Append("  EditableSizePrice: ").Append(EditableSizePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
