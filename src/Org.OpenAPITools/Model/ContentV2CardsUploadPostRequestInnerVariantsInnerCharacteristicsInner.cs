/*
 * Работа с товарами
 *
 * Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца. 
 *
 * The version of the OpenAPI document: products
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContentV2CardsUploadPostRequestInnerVariantsInnerCharacteristicsInner
    /// </summary>
    [DataContract(Name = "_content_v2_cards_upload_post_request_inner_variants_inner_characteristics_inner")]
    public partial class ContentV2CardsUploadPostRequestInnerVariantsInnerCharacteristicsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentV2CardsUploadPostRequestInnerVariantsInnerCharacteristicsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentV2CardsUploadPostRequestInnerVariantsInnerCharacteristicsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentV2CardsUploadPostRequestInnerVariantsInnerCharacteristicsInner" /> class.
        /// </summary>
        /// <param name="id">ID характеристики (required).</param>
        /// <param name="value">Значение характеристики. Тип значения зависит от типа характеристики (required).</param>
        public ContentV2CardsUploadPostRequestInnerVariantsInnerCharacteristicsInner(int id = default(int), Object value = default(Object))
        {
            this.Id = id;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for ContentV2CardsUploadPostRequestInnerVariantsInnerCharacteristicsInner and cannot be null");
            }
            this.Value = value;
        }

        /// <summary>
        /// ID характеристики
        /// </summary>
        /// <value>ID характеристики</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Значение характеристики. Тип значения зависит от типа характеристики
        /// </summary>
        /// <value>Значение характеристики. Тип значения зависит от типа характеристики</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentV2CardsUploadPostRequestInnerVariantsInnerCharacteristicsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
