/*
 * Работа с товарами
 *
 * Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца. 
 *
 * The version of the OpenAPI document: products
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Данные о складе WB
    /// </summary>
    [DataContract(Name = "Office")]
    public partial class Office : IValidatableObject
    {
        /// <summary>
        /// &lt;dl&gt; &lt;dt&gt;Тип товара, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; 
        /// </summary>
        /// <value>&lt;dl&gt; &lt;dt&gt;Тип товара, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; </value>
        public enum CargoTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3
        }


        /// <summary>
        /// &lt;dl&gt; &lt;dt&gt;Тип товара, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; 
        /// </summary>
        /// <value>&lt;dl&gt; &lt;dt&gt;Тип товара, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; </value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "cargoType", EmitDefaultValue = false)]
        public CargoTypeEnum? CargoType { get; set; }
        /// <summary>
        /// &lt;dl&gt; &lt;dt&gt;Тип доставки, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB&lt;/dd&gt; &lt;/dl&gt; 
        /// </summary>
        /// <value>&lt;dl&gt; &lt;dt&gt;Тип доставки, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB&lt;/dd&gt; &lt;/dl&gt; </value>
        public enum DeliveryTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3
        }


        /// <summary>
        /// &lt;dl&gt; &lt;dt&gt;Тип доставки, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB&lt;/dd&gt; &lt;/dl&gt; 
        /// </summary>
        /// <value>&lt;dl&gt; &lt;dt&gt;Тип доставки, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB&lt;/dd&gt; &lt;/dl&gt; </value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "deliveryType", EmitDefaultValue = false)]
        public DeliveryTypeEnum? DeliveryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Office" /> class.
        /// </summary>
        /// <param name="address">Адрес.</param>
        /// <param name="name">Название.</param>
        /// <param name="city">Город.</param>
        /// <param name="id">ID.</param>
        /// <param name="longitude">Долгота.</param>
        /// <param name="latitude">Широта.</param>
        /// <param name="cargoType">&lt;dl&gt; &lt;dt&gt;Тип товара, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - стандартный&lt;/dd&gt; &lt;dd&gt;2 - СГТ (Сверхгабаритный товар)&lt;/dd&gt; &lt;dd&gt;3 - КГТ+ (Крупногабаритный товар)&lt;/dd&gt; &lt;/dl&gt; .</param>
        /// <param name="deliveryType">&lt;dl&gt; &lt;dt&gt;Тип доставки, который принимает склад:&lt;/dt&gt; &lt;dd&gt;1 - доставка на склад WB&lt;/dd&gt; &lt;dd&gt;2 - доставка силами продавца&lt;/dd&gt; &lt;dd&gt;3 - доставка курьером WB&lt;/dd&gt; &lt;/dl&gt; .</param>
        /// <param name="selected">Признак того, что склад уже выбран продавцом.</param>
        public Office(string address = default(string), string name = default(string), string city = default(string), long id = default(long), decimal longitude = default(decimal), decimal latitude = default(decimal), CargoTypeEnum? cargoType = default(CargoTypeEnum?), DeliveryTypeEnum? deliveryType = default(DeliveryTypeEnum?), bool selected = default(bool))
        {
            this.Address = address;
            this.Name = name;
            this.City = city;
            this.Id = id;
            this.Longitude = longitude;
            this.Latitude = latitude;
            this.CargoType = cargoType;
            this.DeliveryType = deliveryType;
            this.Selected = selected;
        }

        /// <summary>
        /// Адрес
        /// </summary>
        /// <value>Адрес</value>
        /*
        <example>ул. Троицкая, Подольск, Московская обл.</example>
        */
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Название
        /// </summary>
        /// <value>Название</value>
        /*
        <example>Москва (Коледино)</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Город
        /// </summary>
        /// <value>Город</value>
        /*
        <example>Москва</example>
        */
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        /*
        <example>15</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Долгота
        /// </summary>
        /// <value>Долгота</value>
        /*
        <example>55.386871</example>
        */
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public decimal Longitude { get; set; }

        /// <summary>
        /// Широта
        /// </summary>
        /// <value>Широта</value>
        /*
        <example>37.588898</example>
        */
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public decimal Latitude { get; set; }

        /// <summary>
        /// Признак того, что склад уже выбран продавцом
        /// </summary>
        /// <value>Признак того, что склад уже выбран продавцом</value>
        [DataMember(Name = "selected", EmitDefaultValue = true)]
        public bool Selected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Office {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  CargoType: ").Append(CargoType).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
