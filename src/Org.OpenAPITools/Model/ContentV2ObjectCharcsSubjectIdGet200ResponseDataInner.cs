/*
 * Работа с товарами
 *
 * Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца. 
 *
 * The version of the OpenAPI document: products
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner
    /// </summary>
    [DataContract(Name = "_content_v2_object_charcs__subjectId__get_200_response_data_inner")]
    public partial class ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner" /> class.
        /// </summary>
        /// <param name="charcID">ID характеристики.</param>
        /// <param name="subjectName">Название предмета.</param>
        /// <param name="subjectID">ID предмета.</param>
        /// <param name="name">Название характеристики.</param>
        /// <param name="required">true - характеристику необходимо обязательно указать в карточке товара. false - характеристику не обязательно указывать.</param>
        /// <param name="unitName">Единица измерения.</param>
        /// <param name="maxCount">Максимальное кол-во значений, которое можно присвоить данной характеристике. Если 0, то нет ограничения. .</param>
        /// <param name="popular">Характеристика популярна у пользователей (true - да, false - нет).</param>
        /// <param name="charcType">Тип характеристики (1 и 0 - строка или массив строк; 4 - число или массив чисел).</param>
        public ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner(int charcID = default(int), string subjectName = default(string), int subjectID = default(int), string name = default(string), bool required = default(bool), string unitName = default(string), int maxCount = default(int), bool popular = default(bool), int charcType = default(int))
        {
            this.CharcID = charcID;
            this.SubjectName = subjectName;
            this.SubjectID = subjectID;
            this.Name = name;
            this.Required = required;
            this.UnitName = unitName;
            this.MaxCount = maxCount;
            this.Popular = popular;
            this.CharcType = charcType;
        }

        /// <summary>
        /// ID характеристики
        /// </summary>
        /// <value>ID характеристики</value>
        [DataMember(Name = "charcID", EmitDefaultValue = false)]
        public int CharcID { get; set; }

        /// <summary>
        /// Название предмета
        /// </summary>
        /// <value>Название предмета</value>
        [DataMember(Name = "subjectName", EmitDefaultValue = false)]
        public string SubjectName { get; set; }

        /// <summary>
        /// ID предмета
        /// </summary>
        /// <value>ID предмета</value>
        [DataMember(Name = "subjectID", EmitDefaultValue = false)]
        public int SubjectID { get; set; }

        /// <summary>
        /// Название характеристики
        /// </summary>
        /// <value>Название характеристики</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// true - характеристику необходимо обязательно указать в карточке товара. false - характеристику не обязательно указывать
        /// </summary>
        /// <value>true - характеристику необходимо обязательно указать в карточке товара. false - характеристику не обязательно указывать</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Единица измерения
        /// </summary>
        /// <value>Единица измерения</value>
        [DataMember(Name = "unitName", EmitDefaultValue = false)]
        public string UnitName { get; set; }

        /// <summary>
        /// Максимальное кол-во значений, которое можно присвоить данной характеристике. Если 0, то нет ограничения. 
        /// </summary>
        /// <value>Максимальное кол-во значений, которое можно присвоить данной характеристике. Если 0, то нет ограничения. </value>
        [DataMember(Name = "maxCount", EmitDefaultValue = false)]
        public int MaxCount { get; set; }

        /// <summary>
        /// Характеристика популярна у пользователей (true - да, false - нет)
        /// </summary>
        /// <value>Характеристика популярна у пользователей (true - да, false - нет)</value>
        [DataMember(Name = "popular", EmitDefaultValue = true)]
        public bool Popular { get; set; }

        /// <summary>
        /// Тип характеристики (1 и 0 - строка или массив строк; 4 - число или массив чисел)
        /// </summary>
        /// <value>Тип характеристики (1 и 0 - строка или массив строк; 4 - число или массив чисел)</value>
        [DataMember(Name = "charcType", EmitDefaultValue = false)]
        public int CharcType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner {\n");
            sb.Append("  CharcID: ").Append(CharcID).Append("\n");
            sb.Append("  SubjectName: ").Append(SubjectName).Append("\n");
            sb.Append("  SubjectID: ").Append(SubjectID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  MaxCount: ").Append(MaxCount).Append("\n");
            sb.Append("  Popular: ").Append(Popular).Append("\n");
            sb.Append("  CharcType: ").Append(CharcType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
